Article explaining what's next and what's being worked on
	Amplitude JS Update

	We've received a lot of positive feed back, questions and feature enhancements, and for that we are very thankful! It's time to organize thoughts and move Amplitude into the next steps.
	What I'm going to be doing is organizing the gameplan below. Any ideas/comments are more than welcome!

	Core Updates
		Change all configs to JSON

		Currently all of the configurations are handled in arrays. JSON will make it cleaner and expandable. Users will be able to access information easier
		and have defaults defined. 

		Mobile Events handled

		Amplitude is going mobile! I will be adding touch events to Amplitude elements which will make mobile players more responsive and accurate.

	Feature Fixes
		Song and Volume Sliders

		There have been some issues with the way the song and volume sliders have been working. I will make a simpler and more accurate way of handling the slide events of these elements.

	Feature Enhancements
		Playlists and songs will be handled through a JSON object

		No more 100s of Audio tags for playlists! This is probably the biggest change but it will allow for dynamic additions of songs to the page and adjusting 
		information on the fly.

		Vertical Volume

		This is simply a vertical volume bar. Will give more possibility to custom design.

		Circular Volume

		A challenge I'm willing to accept (and honestly the lowest priority on the list), but a way to make a knob to control the volume.  This will be handled last in the list of updates.

	Amplitude Config Updates
		Playlists

		Playlists will be defined through the config. This will allow for a lighter weight and dynamic additions to the playlist after page load.

		Default Volume

		Allow you to set the default volume on page load. This will make it easier to customize your player.

	Documentation Updates

	After all of the updates are handled, I will be making documentation for all of the features. In GitHub, I will be placing all of these feature
	enhancements so you can see the status on what is being accomplished. I will be adding new tutorials on Serversideup as well for combining multiple features
	after the updates.

	What won't change

	Don't worry, the core principals of easy design and fully custumizable features of the HTML5 audio tag will remain the same.  The idea of giving an element an id or class and having Amplitude handle the functionality is the core of what we
	are trying to accomplish.  The goal of these updates is to add, more features and make Amplitude more lightweight and flexible. Impossible? Challenge Accepted!  It's awesome to see people using Amplitude and the ideas
	and use cases are incredible.  Feel free to keep submitting ideas and updates.







Add features in GitHub
Add documentation page
Link tutorials to Serverside up -> Tutorials are how to do a whole bunch of functions at the same time.

What we need to add in amplitude:
	Change default values to JSON
	Mobile Touch Events
	More accurate meters
	Dynamic additions
	Multiple individual songs on one page.
	Better structured config
	Vertical volume
	Circular volume

	fade in and fade out

https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Touch_events

Config: 

	amplitude_live
	amplitude_live_source

	ampliutde_shuffle_callback
	amplitude_auto_play

	amplitude_start_song_id

	amplitude_play_callback
	amplitude_before_play_callback
	amplitude_pause_callback
	amplitude_time_update_callback
	amplitude_stop_callback

	amplitude_next_song_callback
	amplitude_previous_song_callback

//ADD
	amplitude_default_volume	-> Sets between 0 and 1
	amplitude_default_image		-> Allows user to set a default image for no album art


Flow:

1.	Page is loaded with Amplitude ->
		Amplitude reads in config file and sets appropriate methods
		Creates necessary audio tag ( can change src dynamically for JSON config )
		Amplitude reads document and binds event handlers


2. User 

All of the playlist play items should play a specified song. Any pause buttons should pause the active song.

Changes:

	Updated config to be JSON

Touch Events: https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Touch_events
Rotate: http://jsfiddle.net/WurNc/
Flat Doc: http://ricostacruz.com/flatdoc/

TODO:
CHANGE ALL REFERENCES FROM AMPLITUDE PLAYLIST TO AMPLITUDE SONGS
	DEFAULT SORT = ORDER
		SORT ALPHA ARTIST
			 ALPHA ALBUM
			 ALPHA NAME

Add to config if songs can't play in browser. Iterate on bind. 

Add to config if log errors

On Multiple songs display allow for track skipping DONE

NOTES
IF no amplitude_start_song defined, start with song, if no song, start with playlist, if no playlist start with songs[0]

Start song numbering starts at 0!!

Eliminated songs and made it just an array of songs by default. Single songs will be just one 

Playlists have order. That's the only difference

With binding time updates, make sure it happens after the song changes (or active song is set). 
	next_song
	previous_song
	initial_play

Using HTML5 range element.. I mean it's HTML5 audio anyway.
http://demosthenes.info/blog/757/Playing-With-The-HTML5-range-Slider-Input

Make sure if playing off of a playlist and change playlist song, then adjust playlist accordingly.
Test with song array.

On song arrays, hard code song titles into display

Recommend that for individual songs they enter the audio duration.

http://stackoverflow.com/questions/19259233/sorting-json-by-specific-element-alphabetically
INSANITY

Have some way to fill an element with song progress that's not the song tracker

Elements
	Now playing
		artist
		title
		album
		album art
	Play
	Shuffle
	Next
	Prev

Methods:
	Play
	Pause
	Stop
	Shuffle
	Play/Pause
	Volume Increment/Decrement
	Repeat
	Volume Meter
	Volume tracker
	Track meter
	Track tracker
	Mute
Classes
	shuffle-on
	shuffle-off
Callbacks
	before_play
	after_play

	before_stop
	after_stop

	before_next
	after_next

	before_prev
	after_prev

	before_pause
	after_pause

	before_shuffle
	after_shuffle

	before_volume_change
	after_volume_change

	before_mute
	after_mute

	before_time_update
	after_time_update

	before_song_information_set
	after_song_information_set

